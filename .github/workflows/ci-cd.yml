name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  GO_VERSION: '1.24'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ven-api:latest
            ${{ secrets.DOCKER_USERNAME }}/ven-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            GITHUB_TOKEN=${{ secrets.GO_PRIVATE_TOKEN || secrets.GITHUB_TOKEN }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.GO_PRIVATE_TOKEN || secrets.GITHUB_TOKEN }}
      
      - name: Verify image push
        run: |
          echo "Image digest: ${{ steps.docker_build.outputs.digest }}"
          echo "✅ Image pushed successfully to ${{ secrets.DOCKER_USERNAME }}/ven-api:latest"

  deploy:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: 22
          script_stop: false
          command_timeout: 15m
          script: |
            set -e
            cd /opt/ven-api
            
            echo "Pulling latest code..."
            git pull origin main
            
            export DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
            export IMAGE_TAG="latest"
            
            echo "Logging into Docker Hub..."
            if ! echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin; then
              echo "❌ Docker login failed"
              exit 1
            fi
            echo "✅ Docker login successful"
            
            echo "Pulling latest app image: $DOCKER_USERNAME/ven-api:$IMAGE_TAG"
            PULL_SUCCESS=false
            for i in {1..3}; do
              if docker pull $DOCKER_USERNAME/ven-api:$IMAGE_TAG; then
                echo "✅ Successfully pulled app image"
                PULL_SUCCESS=true
                break
              else
                echo "⚠️  Pull attempt $i/3 failed, retrying in 5s..."
                sleep 5
              fi
            done
            
            if [ "$PULL_SUCCESS" = false ]; then
              echo "❌ Failed to pull image after 3 attempts"
              echo "Checking if image exists locally..."
              if docker image inspect $DOCKER_USERNAME/ven-api:$IMAGE_TAG >/dev/null 2>&1; then
                echo "⚠️  Using cached image"
              else
                echo "❌ No cached image available, deployment cannot continue"
                exit 1
              fi
            fi
            
            echo "Pulling other service images (parallel)..."
            docker compose pull postgres redis minio mailhog --ignore-pull-failures 2>&1 || echo "Some pulls failed, using cached"
            
            echo "Restarting services with new app image..."
            DOCKER_USERNAME=$DOCKER_USERNAME IMAGE_TAG=$IMAGE_TAG docker compose up -d --force-recreate --remove-orphans ven-api
            
            echo "Waiting for app to start..."
            sleep 10
            
            echo "Checking service status..."
            docker compose ps
            
            echo "Checking app logs..."
            docker compose logs --tail=50 ven-api

      - name: Health check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: 22
          script: |
            echo "Waiting for app to be ready..."
            for i in {1..30}; do
              response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/ping 2>/dev/null || echo "000")
              if [ "$response" = "200" ]; then
                echo "✅ Deployment successful! Health check passed after ${i}s"
                exit 0
              fi
              echo "Attempt $i/30: Got HTTP $response, retrying..."
              sleep 1
            done
            echo "❌ Health check failed after 30s"
            exit 1
