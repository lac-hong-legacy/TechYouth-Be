name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  GO_VERSION: '1.24'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ven-api:latest
            ${{ secrets.DOCKER_USERNAME }}/ven-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GITHUB_TOKEN=${{ secrets.GO_PRIVATE_TOKEN || secrets.GITHUB_TOKEN }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.GO_PRIVATE_TOKEN || secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: 22
          script_stop: false
          command_timeout: 15m
          script: |
            cd /opt/ven-api
            
            echo "Pulling latest code..."
            git pull origin main
            
            export DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
            export IMAGE_TAG="latest"
            
            echo "Pulling latest app image: $DOCKER_USERNAME/ven-api:$IMAGE_TAG"
            docker pull $DOCKER_USERNAME/ven-api:$IMAGE_TAG || echo "Warning: Failed to pull app image"
            
            echo "Pulling other service images (with timeout and retry)..."
            for service in postgres redis minio mailhog; do
              echo "Pulling $service..."
              timeout 60 docker compose pull $service 2>&1 || echo "Failed to pull $service, will use cached version"
            done
            
            echo "Restarting services with new app image..."
            DOCKER_USERNAME=$DOCKER_USERNAME IMAGE_TAG=$IMAGE_TAG docker compose up -d --force-recreate --remove-orphans
            
            echo "Waiting for services to start..."
            sleep 20
            
            echo "Checking service status..."
            docker compose ps
            
            echo "Checking app logs..."
            docker compose logs --tail=50 ven-api

      - name: Health check
        run: |
          echo "Waiting for app to be ready..."
          sleep 10
          
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.STAGING_HOST }}:8000/ping || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "✅ Deployment successful! Health check passed."
          else
            echo "❌ Health check failed! Got HTTP $response"
            exit 1
          fi
