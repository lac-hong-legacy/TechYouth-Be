name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  GO_VERSION: '1.24'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build:
    name: 🏗️ Build & Push Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v5

      - name: 🧱 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🧰 Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: 🧩 Verify deps
        run: go mod tidy && go mod download

      - name: 🔐 Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build & Push Docker Image
        id: build_push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/ven-api:latest
            ghcr.io/${{ github.repository_owner }}/ven-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: ✅ Verify push
        run: |
          echo "✅ Image pushed successfully to GHCR"
          echo "Digest: ${{ steps.build_push.outputs.digest }}"

  deploy:
    name: 🚀 Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 🔑 SSH into Staging
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: 22
          script_stop: true
          command_timeout: 20m
          script: |
            set -e
            cd /opt/ven-api

            IMAGE=ghcr.io/${{ github.repository_owner }}/ven-api:${{ github.sha }}
            LATEST=ghcr.io/${{ github.repository_owner }}/ven-api:latest

            echo "🔐 Logging into GHCR..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "📦 Pulling image $IMAGE..."
            docker pull $IMAGE

            echo "🧩 Tagging as latest..."
            docker tag $IMAGE $LATEST

            echo "🌀 Updating service..."
            docker compose down || true
            docker compose up -d --force-recreate ven-api

            echo "⌛ Waiting 10s before healthcheck..."
            sleep 10

            echo "🩺 Running health check..."
            for i in {1..30}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/ping || echo 000)
              if [ "$code" = "200" ]; then
                echo "✅ Health check passed after ${i}s"
                exit 0
              fi
              echo "Attempt $i failed (HTTP $code)... retrying..."
              sleep 1
            done

            echo "❌ Health check failed. Rolling back..."
            docker compose down
            docker compose up -d --force-recreate ven-api:previous
            exit 1
