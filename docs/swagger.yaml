definitions:
  dto.AchievementResponse:
    properties:
      badge_url:
        type: string
      category:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      unlocked_at:
        type: string
      xp_reward:
        type: integer
    type: object
  dto.AddHeartsRequest:
    properties:
      amount:
        maximum: 10
        minimum: 1
        type: integer
      source:
        description: '"ad", "purchase", "daily_reset"'
        enum:
        - ad
        - purchase
        - daily_reset
        type: string
    required:
    - amount
    - source
    type: object
  dto.AdminUpdateUserRequest:
    properties:
      is_active:
        example: true
        type: boolean
      role:
        enum:
        - user
        - admin
        - moderator
        example: admin
        type: string
    type: object
  dto.AdminUserInfo:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      email_verified:
        example: true
        type: boolean
      failed_attempts:
        example: 0
        type: integer
      id:
        example: usr_123456789
        type: string
      is_active:
        example: true
        type: boolean
      last_login_at:
        example: "2023-01-15T10:30:00Z"
        type: string
      locked_until:
        example: "2023-01-15T12:00:00Z"
        type: string
      role:
        example: user
        type: string
      username:
        example: johndoe
        type: string
    type: object
  dto.AdminUserListResponse:
    properties:
      limit:
        example: 20
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
      users:
        items:
          $ref: '#/definitions/dto.AdminUserInfo'
        type: array
    type: object
  dto.AuditLogResponse:
    properties:
      limit:
        example: 20
        type: integer
      logs:
        items:
          $ref: '#/definitions/dto.AuthAuditLog'
        type: array
      page:
        example: 1
        type: integer
      total:
        example: 150
        type: integer
    type: object
  dto.AuthAuditLog:
    properties:
      action:
        example: login
        type: string
      details:
        example: Login successful
        type: string
      id:
        example: log_123456789
        type: string
      ip:
        example: 192.168.1.1
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2023-01-15T10:30:00Z"
        type: string
      user_agent:
        example: Mozilla/5.0...
        type: string
      user_id:
        example: usr_123456789
        type: string
    type: object
  dto.BatchMediaUploadResponse:
    properties:
      errors:
        items:
          type: string
        type: array
      lesson_id:
        type: string
      uploaded_files:
        items:
          $ref: '#/definitions/dto.MediaUploadResponse'
        type: array
    type: object
  dto.ChangePasswordRequest:
    properties:
      current_password:
        example: OldPass123!
        type: string
      new_password:
        example: NewPass123!
        type: string
    required:
    - current_password
    - new_password
    type: object
  dto.CharacterCollectionResponse:
    properties:
      characters:
        items:
          $ref: '#/definitions/dto.CharacterResponse'
        type: array
      total:
        type: integer
      unlocked:
        type: integer
    type: object
  dto.CharacterResponse:
    properties:
      achievements:
        items:
          type: string
        type: array
      birth_year:
        type: integer
      death_year:
        type: integer
      description:
        type: string
      dynasty:
        type: string
      era:
        type: string
      famous_quote:
        type: string
      id:
        type: string
      image_url:
        type: string
      is_unlocked:
        type: boolean
      lesson_count:
        type: integer
      name:
        type: string
      rarity:
        type: string
    type: object
  dto.CheckLessonStatusRequest:
    properties:
      lesson_id:
        type: string
    required:
    - lesson_id
    type: object
  dto.CheckLessonStatusResponse:
    properties:
      can_still_pass:
        type: boolean
      earned_points:
        type: integer
      min_score:
        type: integer
      passed:
        type: boolean
      points_needed:
        type: integer
      questions_answered:
        type: integer
      questions_total:
        type: integer
      remaining_points:
        type: integer
      score:
        type: integer
      total_points:
        type: integer
    type: object
  dto.CollectionResponse:
    properties:
      achievements:
        items:
          $ref: '#/definitions/dto.AchievementResponse'
        type: array
      characters:
        $ref: '#/definitions/dto.CharacterCollectionResponse'
      stats:
        $ref: '#/definitions/dto.CollectionStatsResponse'
    type: object
  dto.CollectionStatsResponse:
    properties:
      completion_rate:
        type: number
      dynasty_breakdown:
        additionalProperties:
          type: integer
        type: object
      rarity_breakdown:
        additionalProperties:
          type: integer
        type: object
      total_characters:
        type: integer
      unlocked_characters:
        type: integer
    type: object
  dto.CompleteLessonRequest:
    properties:
      lesson_id:
        type: string
      score:
        maximum: 100
        minimum: 0
        type: integer
      time_spent:
        minimum: 1
        type: integer
    required:
    - lesson_id
    - score
    - time_spent
    type: object
  dto.CompleteLessonResponse:
    properties:
      character_unlock:
        type: string
      leveled_up:
        type: boolean
      new_level:
        type: integer
      spirit_evolved:
        type: boolean
      xp_gained:
        type: integer
    type: object
  dto.CreateLessonRequest:
    properties:
      can_skip_after:
        minimum: 0
        type: integer
      character_id:
        type: string
      has_subtitles:
        type: boolean
      min_score:
        maximum: 100
        minimum: 0
        type: integer
      order:
        minimum: 1
        type: integer
      questions:
        items:
          $ref: '#/definitions/dto.CreateQuestionRequest'
        type: array
      story:
        maxLength: 5000
        type: string
      subtitle_url:
        type: string
      thumbnail_url:
        type: string
      title:
        maxLength: 200
        minLength: 1
        type: string
      video_duration:
        minimum: 1
        type: integer
      video_url:
        type: string
      xp_reward:
        maximum: 1000
        minimum: 1
        type: integer
    required:
    - character_id
    - order
    - title
    type: object
  dto.CreateQuestionRequest:
    properties:
      answer: {}
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      options:
        items:
          type: string
        type: array
      points:
        maximum: 100
        minimum: 1
        type: integer
      question:
        maxLength: 1000
        minLength: 1
        type: string
      type:
        enum:
        - multiple_choice
        - true_false
        - fill_blank
        - matching
        type: string
    required:
    - answer
    - points
    - question
    - type
    type: object
  dto.CreateSessionRequest:
    properties:
      device_id:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - device_id
    type: object
  dto.ForgotPasswordRequest:
    properties:
      email:
        example: user@example.com
        type: string
    required:
    - email
    type: object
  dto.HeartStatusResponse:
    properties:
      ads_watched_today:
        type: integer
      can_watch_ad:
        type: boolean
      hearts:
        type: integer
      max_hearts:
        type: integer
      next_reset_time:
        type: string
    type: object
  dto.LeaderboardResponse:
    properties:
      current_user:
        $ref: '#/definitions/dto.LeaderboardUserResponse'
      period:
        type: string
      top_users:
        items:
          $ref: '#/definitions/dto.LeaderboardUserResponse'
        type: array
    type: object
  dto.LeaderboardUserResponse:
    properties:
      level:
        type: integer
      rank:
        type: integer
      spirit_stage:
        type: integer
      spirit_type:
        type: string
      user_id:
        type: string
      username:
        type: string
      xp:
        type: integer
    type: object
  dto.LessonAccessResponse:
    properties:
      can_access:
        type: boolean
      hearts_needed:
        type: integer
      reason:
        type: string
    type: object
  dto.LessonMediaResponse:
    properties:
      lesson_id:
        type: string
      media:
        additionalProperties:
          $ref: '#/definitions/dto.MediaAssetResponse'
        description: 'key: video, subtitle, thumbnail'
        type: object
    type: object
  dto.LessonResponse:
    properties:
      can_skip_after:
        type: integer
      character:
        $ref: '#/definitions/dto.CharacterResponse'
      character_id:
        type: string
      has_subtitles:
        type: boolean
      id:
        type: string
      min_score:
        type: integer
      order:
        type: integer
      questions:
        items:
          $ref: '#/definitions/dto.QuestionResponse'
        type: array
      story:
        type: string
      subtitle_url:
        type: string
      thumbnail_url:
        type: string
      title:
        type: string
      video_duration:
        type: integer
      video_url:
        description: Media Content
        type: string
      xp_reward:
        type: integer
    type: object
  dto.LoginRequest:
    properties:
      device_id:
        example: device_12345
        type: string
      email_or_username:
        example: user@example.com
        type: string
      password:
        example: SecurePass123!
        type: string
      remember_me:
        example: true
        type: boolean
    required:
    - email_or_username
    - password
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 900
        type: integer
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      session_id:
        example: sess_123456789
        type: string
      user:
        $ref: '#/definitions/dto.UserInfo'
    type: object
  dto.MediaAssetResponse:
    properties:
      duration:
        description: seconds
        type: integer
      file_size:
        type: integer
      height:
        type: integer
      id:
        type: string
      url:
        type: string
      width:
        type: integer
    type: object
  dto.MediaUploadResponse:
    properties:
      file_name:
        type: string
      file_size:
        type: integer
      file_type:
        type: string
      id:
        type: string
      url:
        type: string
    type: object
  dto.QuestionResponse:
    properties:
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      options:
        items:
          type: string
        type: array
      points:
        type: integer
      question:
        type: string
      type:
        type: string
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  dto.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: SecurePass123!
        type: string
      username:
        example: johndoe
        maxLength: 30
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.RegisterResponse:
    properties:
      message:
        example: Registration successful. Please check your email for verification.
        type: string
      requires_verification:
        example: true
        type: boolean
      user_id:
        example: usr_123456789
        type: string
    type: object
  dto.ResendVerificationRequest:
    properties:
      email:
        example: user@example.com
        type: string
    required:
    - email
    type: object
  dto.ResetPasswordRequest:
    properties:
      code:
        example: "123456"
        type: string
      new_password:
        example: NewPass123!
        type: string
    required:
    - code
    - new_password
    type: object
  dto.SearchResponse:
    properties:
      characters:
        items:
          $ref: '#/definitions/dto.CharacterResponse'
        type: array
      total:
        type: integer
    type: object
  dto.SecuritySettings:
    properties:
      backup_codes_generated:
        example: false
        type: boolean
      last_password_change:
        example: "2023-01-10T15:30:00Z"
        type: string
      login_notifications:
        example: true
        type: boolean
      session_timeout:
        example: 1440
        type: integer
      two_factor_enabled:
        example: false
        type: boolean
    type: object
  dto.SessionListResponse:
    properties:
      sessions:
        items:
          $ref: '#/definitions/dto.UserSessionInfo'
        type: array
      total:
        example: 3
        type: integer
    type: object
  dto.ShareRequest:
    properties:
      content:
        maxLength: 500
        minLength: 1
        type: string
      item_id:
        type: string
      type:
        description: '"achievement", "character_unlock", "level_up"'
        enum:
        - achievement
        - character_unlock
        - level_up
        type: string
    required:
    - content
    - item_id
    - type
    type: object
  dto.ShareResponse:
    properties:
      platforms:
        items:
          type: string
        type: array
      share_image:
        type: string
      share_text:
        type: string
      share_url:
        type: string
    type: object
  dto.SpiritResponse:
    properties:
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      stage:
        type: integer
      type:
        type: string
      xp:
        type: integer
      xp_to_next:
        type: integer
    type: object
  dto.SubmitQuestionAnswerRequest:
    properties:
      answer: {}
      lesson_id:
        type: string
      question_id:
        type: string
    required:
    - answer
    - lesson_id
    - question_id
    type: object
  dto.SubmitQuestionAnswerResponse:
    properties:
      can_still_pass:
        type: boolean
      correct:
        type: boolean
      current_score:
        type: integer
      earned_points:
        type: integer
      passed:
        type: boolean
      points:
        type: integer
      points_needed:
        type: integer
      total_points:
        type: integer
    type: object
  dto.TimelineCollectionResponse:
    properties:
      eras:
        items:
          $ref: '#/definitions/dto.TimelineEraResponse'
        type: array
    type: object
  dto.TimelineDynastyResponse:
    properties:
      characters:
        items:
          $ref: '#/definitions/dto.CharacterResponse'
        type: array
      dynasty:
        type: string
      end_year:
        type: integer
      is_unlocked:
        type: boolean
      progress:
        type: number
      start_year:
        type: integer
    type: object
  dto.TimelineEraResponse:
    properties:
      dynasties:
        items:
          $ref: '#/definitions/dto.TimelineDynastyResponse'
        type: array
      era:
        type: string
      is_unlocked:
        type: boolean
      progress:
        type: number
    type: object
  dto.UpdateProfileRequest:
    properties:
      email:
        example: newemail@example.com
        type: string
      username:
        example: newusername
        maxLength: 30
        minLength: 3
        type: string
    type: object
  dto.UpdateSecuritySettingsRequest:
    properties:
      login_notifications:
        example: true
        type: boolean
      session_timeout:
        example: 720
        maximum: 43200
        minimum: 300
        type: integer
    type: object
  dto.UserInfo:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      email_verified:
        example: true
        type: boolean
      id:
        example: usr_123456789
        type: string
      last_login_at:
        example: "2023-01-15T10:30:00Z"
        type: string
      role:
        example: user
        type: string
      username:
        example: johndoe
        type: string
    type: object
  dto.UserProfileResponse:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      email_verified:
        example: true
        type: boolean
      id:
        example: usr_123456789
        type: string
      is_active:
        example: true
        type: boolean
      last_login_at:
        example: "2023-01-15T10:30:00Z"
        type: string
      last_login_ip:
        example: 192.168.1.1
        type: string
      role:
        example: user
        type: string
      stats:
        $ref: '#/definitions/dto.UserStats'
      username:
        example: johndoe
        type: string
    type: object
  dto.UserProgressResponse:
    properties:
      completed_lessons:
        items:
          type: string
        type: array
      hearts:
        type: integer
      last_activity:
        type: string
      last_heart_reset:
        type: string
      level:
        type: integer
      max_hearts:
        type: integer
      recent_achievements:
        items:
          $ref: '#/definitions/dto.AchievementResponse'
        type: array
      spirit:
        $ref: '#/definitions/dto.SpiritResponse'
      streak:
        type: integer
      total_play_time:
        type: integer
      unlocked_characters:
        items:
          type: string
        type: array
      user_id:
        type: string
      xp:
        type: integer
      xp_to_next_level:
        type: integer
    type: object
  dto.UserSessionInfo:
    properties:
      created_at:
        example: "2023-01-15T10:30:00Z"
        type: string
      device_id:
        example: device_12345
        type: string
      id:
        example: sess_123456789
        type: string
      ip:
        example: 192.168.1.1
        type: string
      is_active:
        example: true
        type: boolean
      is_current:
        example: false
        type: boolean
      last_used:
        example: "2023-01-15T11:30:00Z"
        type: string
      user_agent:
        example: Mozilla/5.0...
        type: string
    type: object
  dto.UserStats:
    properties:
      active_sessions:
        example: 2
        type: integer
      failed_attempts:
        example: 0
        type: integer
      last_password_change:
        example: "2023-01-10T15:30:00Z"
        type: string
      total_logins:
        example: 42
        type: integer
    type: object
  dto.ValidateLessonRequest:
    properties:
      lesson_id:
        type: string
      user_answers:
        additionalProperties: true
        type: object
    required:
    - lesson_id
    - user_answers
    type: object
  dto.ValidateLessonResponse:
    properties:
      min_score:
        type: integer
      passed:
        type: boolean
      score:
        type: integer
      total_points:
        type: integer
    type: object
  dto.VerifyEmailRequest:
    properties:
      code:
        example: "123456"
        type: string
      email:
        example: user@example.com
        type: string
    required:
    - code
    - email
    type: object
  model.Character:
    type: object
  shared.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/admin/characters:
    post:
      consumes:
      - application/json
      description: Create a new historical character (admin only)
      parameters:
      - description: Admin internal password
        in: header
        name: X-Internal-Password
        required: true
        type: string
      - description: Character data
        in: body
        name: character
        required: true
        schema:
          $ref: '#/definitions/model.Character'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.CharacterResponse'
              type: object
      summary: Create Character (Admin)
      tags:
      - admin
  /api/v1/admin/lessons/{lessonId}/media:
    get:
      description: Get all media assets for a lesson (Admin only)
      parameters:
      - default: Bearer <admin_token>
        description: Admin Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Lesson ID
        in: path
        name: lessonId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LessonMediaResponse'
              type: object
      security:
      - Bearer: []
      summary: Get Lesson Media (Admin)
      tags:
      - admin
  /api/v1/admin/lessons/{lessonId}/media/batch:
    post:
      consumes:
      - multipart/form-data
      description: Upload multiple media files for a lesson at once (Admin only)
      parameters:
      - default: Bearer <admin_token>
        description: Admin Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Lesson ID
        in: path
        name: lessonId
        required: true
        type: string
      - description: Video file
        in: formData
        name: video
        type: file
      - description: Subtitle file
        in: formData
        name: subtitle
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.BatchMediaUploadResponse'
              type: object
      security:
      - Bearer: []
      summary: Batch Upload Media (Admin)
      tags:
      - admin
  /api/v1/admin/lessons/{lessonId}/subtitle:
    post:
      consumes:
      - multipart/form-data
      description: Upload subtitle file for lesson video (Admin only)
      parameters:
      - default: Bearer <admin_token>
        description: Admin Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Lesson ID
        in: path
        name: lessonId
        required: true
        type: string
      - description: Subtitle file (VTT, SRT)
        in: formData
        name: subtitle
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.MediaUploadResponse'
              type: object
      security:
      - Bearer: []
      summary: Upload Lesson Subtitle (Admin)
      tags:
      - admin
  /api/v1/admin/lessons/{lessonId}/video:
    post:
      consumes:
      - multipart/form-data
      description: Upload MP4 video file for lesson storytelling (Admin only)
      parameters:
      - default: Bearer <admin_token>
        description: Admin Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Lesson ID
        in: path
        name: lessonId
        required: true
        type: string
      - description: Video file (MP4, MOV, AVI)
        in: formData
        name: video
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.MediaUploadResponse'
              type: object
      security:
      - Bearer: []
      summary: Upload Lesson Video (Admin)
      tags:
      - admin
  /api/v1/admin/lessons/new:
    post:
      consumes:
      - application/json
      description: Create a new lesson using structured request (admin only)
      parameters:
      - default: Bearer <admin_token>
        description: Admin Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Lesson creation request
        in: body
        name: lessonRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateLessonRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LessonResponse'
              type: object
      security:
      - Bearer: []
      summary: Create Lesson from Request (Admin)
      tags:
      - admin
  /api/v1/admin/media/assets/{assetId}:
    delete:
      description: Delete a media asset and its physical file (Admin only)
      parameters:
      - default: Bearer <admin_token>
        description: Admin Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Media Asset ID
        in: path
        name: assetId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  type: string
              type: object
      security:
      - Bearer: []
      summary: Delete Media Asset (Admin)
      tags:
      - admin
  /api/v1/admin/media/statistics:
    get:
      description: Get statistics about media assets and usage (Admin only)
      parameters:
      - default: Bearer <admin_token>
        description: Admin Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
      security:
      - Bearer: []
      summary: Get Media Statistics (Admin)
      tags:
      - admin
  /api/v1/admin/users:
    get:
      consumes:
      - application/json
      description: Get list of all users (admin only)
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.AdminUserListResponse'
              type: object
      security:
      - Bearer: []
      summary: Get all users (Admin)
      tags:
      - admin
  /api/v1/admin/users/{userId}:
    delete:
      consumes:
      - application/json
      description: Soft delete user (admin only)
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  type: object
              type: object
      security:
      - Bearer: []
      summary: Delete user (Admin)
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Update user information (admin only)
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: User update data
        in: body
        name: updateRequest
        required: true
        schema:
          $ref: '#/definitions/dto.AdminUpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.AdminUserInfo'
              type: object
      security:
      - Bearer: []
      summary: Update user (Admin)
      tags:
      - admin
  /api/v1/change-password:
    post:
      consumes:
      - application/json
      description: Change user password (requires authentication)
      parameters:
      - description: Current and new password
        in: body
        name: changeRequest
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  type: object
              type: object
      security:
      - Bearer: []
      summary: Change password
      tags:
      - auth
  /api/v1/content/characters:
    get:
      consumes:
      - application/json
      description: Get list of historical characters with filtering options
      parameters:
      - description: Filter by dynasty
        in: query
        name: dynasty
        type: string
      - description: Filter by rarity
        in: query
        name: rarity
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.CharacterCollectionResponse'
              type: object
      summary: Get Characters
      tags:
      - content
  /api/v1/content/characters/{characterId}:
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific character
      parameters:
      - description: Character ID
        in: path
        name: characterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.CharacterResponse'
              type: object
      summary: Get Character
      tags:
      - content
  /api/v1/content/characters/{characterId}/lessons:
    get:
      consumes:
      - application/json
      description: Get all lessons for a specific character
      parameters:
      - description: Character ID
        in: path
        name: characterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.LessonResponse'
                  type: array
              type: object
      summary: Get Character Lessons
      tags:
      - content
  /api/v1/content/dynasties:
    get:
      consumes:
      - application/json
      description: Get all dynasties
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
      summary: Get Dynasties
      tags:
      - content
  /api/v1/content/eras:
    get:
      consumes:
      - application/json
      description: Get all eras
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
      summary: Get Eras
      tags:
      - content
  /api/v1/content/lessons/{lessonId}:
    get:
      consumes:
      - application/json
      description: Get detailed lesson content including questions
      parameters:
      - description: Lesson ID
        in: path
        name: lessonId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LessonResponse'
              type: object
      summary: Get Lesson
      tags:
      - content
  /api/v1/content/lessons/questions/answer:
    post:
      consumes:
      - application/json
      description: Submit answer for individual question in a lesson
      parameters:
      - default: Bearer <user_token>
        description: User Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Question answer request
        in: body
        name: submitRequest
        required: true
        schema:
          $ref: '#/definitions/dto.SubmitQuestionAnswerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.SubmitQuestionAnswerResponse'
              type: object
      security:
      - Bearer: []
      summary: Submit Question Answer
      tags:
      - content
  /api/v1/content/lessons/status:
    post:
      consumes:
      - application/json
      description: Check current lesson completion status and score
      parameters:
      - default: Bearer <user_token>
        description: User Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Lesson status request
        in: body
        name: statusRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CheckLessonStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.CheckLessonStatusResponse'
              type: object
      security:
      - Bearer: []
      summary: Check Lesson Status
      tags:
      - content
  /api/v1/content/lessons/validate:
    post:
      consumes:
      - application/json
      description: Validate user answers for a lesson and return score
      parameters:
      - description: Validation request
        in: body
        name: validateRequest
        required: true
        schema:
          $ref: '#/definitions/dto.ValidateLessonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ValidateLessonResponse'
              type: object
      summary: Validate Lesson Answers
      tags:
      - content
  /api/v1/content/search:
    get:
      consumes:
      - application/json
      description: Search characters and content with various filters
      parameters:
      - description: Search query
        in: query
        name: query
        type: string
      - description: Filter by dynasty
        in: query
        name: dynasty
        type: string
      - description: Filter by rarity
        in: query
        name: rarity
        type: string
      - description: Limit results
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.SearchResponse'
              type: object
      summary: Search Content
      tags:
      - content
  /api/v1/content/timeline:
    get:
      consumes:
      - application/json
      description: Get the historical timeline with eras and dynasties
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.TimelineCollectionResponse'
              type: object
      summary: Get Timeline
      tags:
      - content
  /api/v1/forgot-password:
    post:
      consumes:
      - application/json
      description: Send password reset email to user
      parameters:
      - description: Email address
        in: body
        name: forgotRequest
        required: true
        schema:
          $ref: '#/definitions/dto.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  type: object
              type: object
      summary: Request password reset
      tags:
      - auth
  /api/v1/guest/session:
    post:
      consumes:
      - application/json
      description: This endpoint creates a new guest session or retrieves an existing
        one based on device ID
      parameters:
      - description: Create session request
        in: body
        name: createSessionRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create or Get Guest Session
      tags:
      - guest
  /api/v1/guest/session/{sessionId}/hearts/add:
    post:
      consumes:
      - application/json
      description: This endpoint adds hearts to a guest session when an ad is watched
      parameters:
      - description: Session ID
        in: path
        name: sessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Add Hearts from Ad
      tags:
      - guest
  /api/v1/guest/session/{sessionId}/hearts/lose:
    post:
      consumes:
      - application/json
      description: This endpoint deducts a heart from a guest session when a lesson
        is failed
      parameters:
      - description: Session ID
        in: path
        name: sessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Lose Heart
      tags:
      - guest
  /api/v1/guest/session/{sessionId}/lesson/{lessonId}/access:
    get:
      consumes:
      - application/json
      description: This endpoint checks if a guest session can access a specific lesson
      parameters:
      - description: Session ID
        in: path
        name: sessionId
        required: true
        type: string
      - description: Lesson ID
        in: path
        name: lessonId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LessonAccessResponse'
              type: object
      summary: Check Lesson Access
      tags:
      - guest
  /api/v1/guest/session/{sessionId}/lesson/complete:
    post:
      consumes:
      - application/json
      description: This endpoint marks a lesson as completed for a guest session
      parameters:
      - description: Session ID
        in: path
        name: sessionId
        required: true
        type: string
      - description: Complete lesson request
        in: body
        name: completeLessonRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CompleteLessonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Complete Lesson
      tags:
      - guest
  /api/v1/guest/session/{sessionId}/progress:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves the progress of a guest session
      parameters:
      - description: Session ID
        in: path
        name: sessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Get Guest Progress
      tags:
      - guest
  /api/v1/leaderboard/all-time:
    get:
      consumes:
      - application/json
      description: Get all-time leaderboard rankings
      parameters:
      - description: Limit results (default 50)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LeaderboardResponse'
              type: object
      summary: Get All Time Leaderboard
      tags:
      - leaderboard
  /api/v1/leaderboard/monthly:
    get:
      consumes:
      - application/json
      description: Get monthly leaderboard rankings
      parameters:
      - description: Limit results (default 50)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LeaderboardResponse'
              type: object
      summary: Get Monthly Leaderboard
      tags:
      - leaderboard
  /api/v1/leaderboard/weekly:
    get:
      consumes:
      - application/json
      description: Get weekly leaderboard rankings
      parameters:
      - description: Limit results (default 50)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LeaderboardResponse'
              type: object
      summary: Get Weekly Leaderboard
      tags:
      - leaderboard
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return access token
      parameters:
      - description: Login credentials
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
      summary: Login user
      tags:
      - auth
  /api/v1/logout:
    post:
      consumes:
      - application/json
      description: Invalidate current session
      parameters:
      - default: Bearer <user_token>
        description: User Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  type: object
              type: object
      security:
      - Bearer: []
      summary: Logout user
      tags:
      - auth
  /api/v1/logout-all:
    post:
      consumes:
      - application/json
      description: Invalidate all sessions for the user
      parameters:
      - default: Bearer <user_token>
        description: User Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  type: object
              type: object
      security:
      - Bearer: []
      summary: Logout from all devices
      tags:
      - auth
  /api/v1/refresh:
    post:
      consumes:
      - application/json
      description: Generate new access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refreshRequest
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
      summary: Refresh access token
      tags:
      - auth
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with email verification
      parameters:
      - description: Registration details
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RegisterResponse'
              type: object
      summary: Register a new user
      tags:
      - auth
  /api/v1/resend-verification:
    post:
      consumes:
      - application/json
      description: Send a new verification email to user
      parameters:
      - description: Email address
        in: body
        name: resendRequest
        required: true
        schema:
          $ref: '#/definitions/dto.ResendVerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  type: object
              type: object
      summary: Resend verification email
      tags:
      - auth
  /api/v1/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password with reset code
      parameters:
      - description: Reset code and new password
        in: body
        name: resetRequest
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  type: object
              type: object
      summary: Reset password
      tags:
      - auth
  /api/v1/user/audit-logs:
    get:
      consumes:
      - application/json
      description: Get user authentication audit logs
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.AuditLogResponse'
              type: object
      security:
      - Bearer: []
      summary: Get audit logs
      tags:
      - user
  /api/v1/user/collection:
    get:
      consumes:
      - application/json
      description: Get user's character collection and achievements
      parameters:
      - description: User ID
        in: query
        name: UserID
        type: string
      - default: Bearer <user_token>
        description: User Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.CollectionResponse'
              type: object
      security:
      - Bearer: []
      summary: Get User Collection
      tags:
      - user
  /api/v1/user/hearts:
    get:
      consumes:
      - application/json
      description: Get current heart status and reset information
      parameters:
      - default: Bearer <user_token>
        description: User Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.HeartStatusResponse'
              type: object
      security:
      - Bearer: []
      summary: Get Heart Status
      tags:
      - user
  /api/v1/user/hearts/add:
    post:
      consumes:
      - application/json
      description: Add hearts from ads or other sources
      parameters:
      - default: Bearer <user_token>
        description: User Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Add hearts request
        in: body
        name: addHeartsRequest
        required: true
        schema:
          $ref: '#/definitions/dto.AddHeartsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.HeartStatusResponse'
              type: object
      security:
      - Bearer: []
      summary: Add User Hearts
      tags:
      - user
  /api/v1/user/hearts/lose:
    post:
      consumes:
      - application/json
      description: Deduct a heart when user fails a lesson
      parameters:
      - default: Bearer <user_token>
        description: User Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.HeartStatusResponse'
              type: object
      security:
      - Bearer: []
      summary: Lose User Heart
      tags:
      - user
  /api/v1/user/initialize:
    post:
      consumes:
      - application/json
      description: Initialize user profile after first login (zodiac setup)
      parameters:
      - default: Bearer <user_token>
        description: User Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Birth year for zodiac
        in: body
        name: birthYear
        required: true
        schema:
          additionalProperties:
            type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserProgressResponse'
              type: object
      security:
      - Bearer: []
      summary: Initialize User Profile
      tags:
      - user
  /api/v1/user/lesson/{lessonId}/access:
    get:
      consumes:
      - application/json
      description: Check if user can access a specific lesson
      parameters:
      - description: Lesson ID
        in: path
        name: lessonId
        required: true
        type: string
      - default: Bearer <user_token>
        description: User Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LessonAccessResponse'
              type: object
      security:
      - Bearer: []
      summary: Check User Lesson Access
      tags:
      - user
  /api/v1/user/lesson/complete:
    post:
      consumes:
      - application/json
      description: Complete a lesson for registered user
      parameters:
      - description: Complete lesson request
        in: body
        name: completeLessonRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CompleteLessonRequest'
      - default: Bearer <user_token>
        description: User Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.CompleteLessonResponse'
              type: object
      security:
      - Bearer: []
      summary: Complete User Lesson
      tags:
      - user
  /api/v1/user/profile:
    get:
      consumes:
      - application/json
      description: Get current user's profile information
      parameters:
      - default: Bearer <user_token>
        description: User Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserProfileResponse'
              type: object
      security:
      - Bearer: []
      summary: Get User Profile
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update user profile information
      parameters:
      - default: Bearer <user_token>
        description: User Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Update profile request
        in: body
        name: updateProfileRequest
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserProfileResponse'
              type: object
      security:
      - Bearer: []
      summary: Update User Profile
      tags:
      - user
  /api/v1/user/progress:
    get:
      consumes:
      - application/json
      description: Get current user's game progress
      parameters:
      - default: Bearer <user_token>
        description: User Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserProgressResponse'
              type: object
      security:
      - Bearer: []
      summary: Get User Progress
      tags:
      - user
  /api/v1/user/security:
    get:
      consumes:
      - application/json
      description: Get user security settings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.SecuritySettings'
              type: object
      security:
      - Bearer: []
      summary: Get security settings
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update user security settings
      parameters:
      - description: Security settings
        in: body
        name: updateRequest
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateSecuritySettingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.SecuritySettings'
              type: object
      security:
      - Bearer: []
      summary: Update security settings
      tags:
      - user
  /api/v1/user/sessions:
    get:
      consumes:
      - application/json
      description: Get list of active user sessions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.SessionListResponse'
              type: object
      security:
      - Bearer: []
      summary: Get user sessions
      tags:
      - user
  /api/v1/user/sessions/{sessionId}:
    delete:
      consumes:
      - application/json
      description: Revoke a specific user session
      parameters:
      - description: Session ID
        in: path
        name: sessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  type: object
              type: object
      security:
      - Bearer: []
      summary: Revoke user session
      tags:
      - user
  /api/v1/user/share:
    post:
      consumes:
      - application/json
      description: Share user achievement or progress on social media
      parameters:
      - default: Bearer <user_token>
        description: User Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Share request
        in: body
        name: shareRequest
        required: true
        schema:
          $ref: '#/definitions/dto.ShareRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ShareResponse'
              type: object
      security:
      - Bearer: []
      summary: Share Achievement
      tags:
      - user
  /api/v1/username/check/{username}:
    get:
      description: Check if a username is available for registration
      parameters:
      - description: Username to check
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
      summary: Check Username Availability
      tags:
      - auth
  /api/v1/verify-email:
    post:
      consumes:
      - application/json
      description: Verify user email with 6-digit verification code
      parameters:
      - description: Verification code and email
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  type: object
              type: object
      summary: Verify email
      tags:
      - auth
  /ping:
    get:
      consumes:
      - application/json
      description: This endpoint checks the health of the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shared.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Ping
      tags:
      - health
swagger: "2.0"
